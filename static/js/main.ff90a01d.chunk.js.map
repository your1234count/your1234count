{"version":3,"sources":["IconexConnect.js","SDK.js","App.js","serviceWorker.js","index.js"],"names":["IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","provider","HttpProvider","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","IcxTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","method","build","sendTxBuild","_ref3","_ref3$params","_ref3$networkId","networkId","NID","_ref3$stepLimit","stepLimit","_ref3$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","sendTxBuild2","_ref2","_ref2$networkId","_ref2$stepLimit","_ref2$value","App","React","forwardRef","props","ref","react_default","a","createElement","react_router_dom","Object","assign","innerRef","makeStyles","root","padding","color","& p","& span","state","login","txevent","myCnt","myAddress","funcLogin","_callee","e","regenerator_default","wrap","_context","prev","next","sent","_this","setState","stop","funcUpdate","_callee2","_context2","call","CONTRACT_ADDRESS","execute","Number","funcTx","_callee3","txObj","_context3","setTimeout","className","this","Fragment","Paper","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff90a01d.chunk.js","sourcesContent":["const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","import IconService, {\n    HttpProvider,\n    IconBuilder,\n  } from 'icon-sdk-js'\n\n  \n  const provider = new HttpProvider(window.PROVIDER_URL)\n  const iconService = new IconService(provider)\n  \n  const {\n    CallBuilder,\n    CallTransactionBuilder,\n    IcxTransactionBuilder,\n  } = IconBuilder;\n  \n  const callBuild = ({\n    from,\n    methodName,\n    to,\n    params = {},\n  } = {}) => {\n    const callBuilder = new CallBuilder();\n    const obj = callBuilder\n      .from(from)\n      .to(to)\n      .method(methodName)\n      .params(params)\n      .build();\n    return obj;\n  };\n  \n  const sendTxBuild2 = ({\n    from,\n    to,\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const TransactionBuilder = new IcxTransactionBuilder();\n    const obj = TransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  const sendTxBuild = ({\n    from,\n    to,\n    methodName,\n    params = {},\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .method(methodName)\n      .params(params)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  export default {\n    iconService,\n    callBuild,\n    sendTxBuild,\n    sendTxBuild2\n  }","import React, { Component } from 'react';\nimport './App.css';\n\nimport IconexConnect from './IconexConnect';\nimport {\n  IconConverter\n} from 'icon-sdk-js'\nimport SDK from './SDK.js';\n\nimport { MemoryRouter as Router } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/styles';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst AdapterLink = React.forwardRef((props, ref) => <Link innerRef={ref} {...props} />);\n\nconst CollisionLink = React.forwardRef((props, ref) => (\n  <Link innerRef={ref} to=\"/getting-started/installation/\" {...props} />\n));\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n    color: 'red',\n    '& p': {\n      color: 'green',\n      '& span': {\n        color: 'blue',\n      },\n    },\n  },\n});\n\nexport default class App extends Component {\n\n  state = {\n    login: false,\n    txevent: false,\n    myCnt: 0,\n    myAddress: ''\n  }\n\n  funcLogin = async (e) => {\n    const myAddress = await IconexConnect.getAddress()\n    this.setState({\n      login: true,\n      myAddress: myAddress\n    })\n  }\n\n  funcUpdate = async (e) => {\n    const myCnt = await\n      SDK.iconService.call(\n        SDK.callBuild({\n          from: this.state.myAddress,\n          methodName: 'getyourcount',\n          params: {\n          },\n          to: window.CONTRACT_ADDRESS,\n        })\n      ).execute()\n\n    this.setState({\n      myCnt: Number(myCnt),\n      txevent: true\n    })\n  }\n\n  funcTx = async () => {\n    const { sendTxBuild2 } = SDK\n    const txObj = sendTxBuild2({\n      from: this.state.myAddress,\n      to: window.CONTRACT_ADDRESS,\n    })\n    const tx = await IconexConnect.sendTransaction(txObj)\n    setTimeout(this.funcUpdate, 2500);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n            !this.state.login ? (\n              <>\n                <Button color=\"primary\" to=\"/\" onClick={this.funcLogin}>\n                  Login\n            </Button>\n              </>\n            ) : (\n                <>{\n                  !this.state.txevent ? (\n                    <>\n                      <Button color=\"primary\" to=\"/\" onClick={this.funcTx}>\n                        send tx\n                </Button>\n                    </>\n                  ) : (\n                      <>\n                        <Paper >\n                          <p>\n                            반가워요.\n                  당신은 {this.state.myCnt}번째 방문객입니다.\n                          </p>\n                        </Paper>\n                      </>\n                    )\n                }\n                </>\n              )\n          }\n\n        </header>\n      </div>\n    );\n  }\n\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}